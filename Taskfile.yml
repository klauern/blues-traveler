version: '3'

vars:
  BINARY_NAME: blues-traveler
  MAIN_FILE: main.go

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  deps:
    desc: Download and verify dependencies
    cmds:
      - go mod download
      - go mod verify
      - go mod tidy

  build:
    desc: Build the binary with Go 1.25 optimizations
    deps: [format]
    vars:
      VERSION:
        sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
      COMMIT:
        sh: git rev-parse HEAD 2>/dev/null || echo "unknown"
      DATE:
        sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
    cmds:
      - go build -ldflags="-s -w -X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.date={{.DATE}}" -o {{.BINARY_NAME}} .
    generates:
      - "{{.BINARY_NAME}}"

  build-all:
    desc: Build for multiple platforms with Go 1.25 optimizations
    deps: [format]
    vars:
      VERSION:
        sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
      COMMIT:
        sh: git rev-parse HEAD 2>/dev/null || echo "unknown"
      DATE:
        sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
      LDFLAGS: "-s -w -X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.date={{.DATE}}"
    cmds:
      - mkdir -p dist
      - GOOS=linux GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.BINARY_NAME}}-linux-amd64 .
      - GOOS=darwin GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.BINARY_NAME}}-darwin-amd64 .
      - GOOS=darwin GOARCH=arm64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.BINARY_NAME}}-darwin-arm64 .
      - GOOS=windows GOARCH=amd64 go build -ldflags="{{.LDFLAGS}}" -o dist/{{.BINARY_NAME}}-windows-amd64.exe .

  format:
    desc: Format Go code
    cmds:
      - gofumpt -w .
      - go mod tidy

  lint:
    desc: Run linter
    cmds:
      - |
        if command -v golangci-lint >/dev/null 2>&1; then
          golangci-lint run
        else
          echo "golangci-lint not found, running go vet instead"
          go vet ./...
        fi

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  test-coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated{{":"}} coverage.html"

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -f {{.BINARY_NAME}}
      - rm -rf dist/
      - rm -f coverage.out coverage.html

  install:
    desc: Install the binary to GOPATH/bin
    vars:
      VERSION:
        sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
      COMMIT:
        sh: git rev-parse HEAD 2>/dev/null || echo "unknown"
      DATE:
        sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
    cmds:
      - go install -ldflags="-s -w -X main.version={{.VERSION}} -X main.commit={{.COMMIT}} -X main.date={{.DATE}}" .

  run:
    desc: Run the application
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} {{.CLI_ARGS}}

  dev:
    desc: Development workflow (format, lint, test, build) with Go 1.25 features
    cmds:
      - task: format
      - task: lint
      - task: test
      - task: build
      - task: performance-check

  release:
    desc: Prepare release (clean, deps, dev, build-all)
    cmds:
      - task: clean
      - task: deps
      - task: dev
      - task: build-all
      - echo "Release artifacts built in dist/"

  check:
    desc: Run all checks (format, lint, test)
    cmds:
      - task: format
      - task: lint
      - task: test

  setup-dev:
    desc: Setup development environment
    cmds:
      - |
        echo "Installing development tools..."
        if ! command -v golangci-lint >/dev/null 2>&1; then
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        fi
        if ! command -v task >/dev/null 2>&1; then
          echo "Task runner not found. Install from: https://taskfile.dev/installation/"
        fi
      - task: deps
      - echo "Development environment ready!"

  watch:
    desc: Watch for changes and rebuild
    deps: [build]
    cmds:
      - |
        if command -v fswatch >/dev/null 2>&1; then
          fswatch -o . -e ".*" -i "\\.go$" | xargs -n1 -I{} task build
        else
          echo "fswatch not found. Install with: brew install fswatch (macOS) or apt-get install fswatch (Linux)"
          echo "Alternatively, use: find . -name '*.go' | entr task build"
        fi

  # Go 1.25 specific tasks
  doc-server:
    desc: Start documentation server using Go 1.25 go doc -http feature
    cmds:
      - echo "Starting documentation server on http://localhost:6060"
      - go doc -http=:6060

  test-concurrent:
    desc: Run concurrent tests with Go 1.25 testing/synctest
    cmds:
      - echo "Running concurrent tests with testing/synctest..."
      - go test -v -run="TestRegistry.*Concurrent" ./internal/hooks/
      - go test -v -race ./...

