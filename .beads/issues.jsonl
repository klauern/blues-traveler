{"id":"blues-traveler-1","title":"Integrate log rotation into logging system","description":"Log rotation is configured via lumberjack but not actually used. The logging system writes directly to OpenFile instead of through the rotating logger.","design":"Wire lumberjack into logging system by adding LogWriter io.Writer to HookContext. When LogWriter is present, write logs through it instead of directly to file. This will enable actual log rotation based on configured settings.","acceptance_criteria":"- LogWriter field added to HookContext\n- Logging writes through LogWriter when present\n- Log rotation settings (maxAge, maxSize, maxBackups, compress) are applied\n- Tests verify rotation behavior","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T11:05:23.971897-05:00","updated_at":"2025-10-17T11:05:23.971897-05:00"}
{"id":"blues-traveler-2","title":"Add external tool availability detection","description":"Format and vet hooks depend on external tools (prettier, uvx, ruff, ty, fd) without checking if they're available, leading to confusing error messages.","design":"Add lazy tool detection with helpful error messages. Check tool availability before use and provide installation instructions if missing. Tools to check: prettier, uvx, ruff, ty, fd.","acceptance_criteria":"- Tool availability check before execution\n- Clear error messages with installation instructions\n- Graceful degradation when tools are missing\n- Tests for tool detection logic","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T11:05:24.063588-05:00","updated_at":"2025-10-17T11:05:24.063588-05:00"}
{"id":"blues-traveler-3","title":"Add settings precedence tests","description":"No tests exist for project-override-global configuration scenarios. Need comprehensive tests to ensure project settings properly override global settings.","acceptance_criteria":"- Test: project enabled + global disabled = enabled\n- Test: project disabled + global enabled = disabled  \n- Test: project nil + global enabled = enabled\n- Test: project nil + global disabled = disabled\n- All precedence scenarios covered","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T11:05:24.144727-05:00","updated_at":"2025-10-17T11:05:24.144727-05:00"}
{"id":"blues-traveler-4","title":"Add diagnose command","description":"No way to check tool availability or configuration status. A diagnose command would help users troubleshoot issues.","design":"Add 'blues-traveler diagnose' command that checks:\n- External tool availability (gofumpt, prettier, fd, uvx, etc)\n- Configuration file locations and validity\n- Logging status and rotation config\n- Installed hooks\nProvide actionable output with installation instructions for missing tools.","acceptance_criteria":"- Command shows tool availability status\n- Shows configuration file paths\n- Shows logging and rotation status\n- Provides installation instructions for missing tools\n- Tests for diagnose command","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-17T11:05:24.227799-05:00","updated_at":"2025-10-17T11:05:24.227799-05:00"}
{"id":"blues-traveler-5","title":"Clean up duplicate imports","description":"Some files have duplicate imports with different aliases for the same package, making the code less readable.","acceptance_criteria":"- All duplicate imports removed\n- Single consistent import alias used per package\n- Code still compiles and passes tests","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-17T11:05:24.315594-05:00","updated_at":"2025-10-17T11:05:24.315594-05:00"}
{"id":"blues-traveler-6","title":"Improve error messages with context and suggestions","description":"Some error messages could be more helpful by adding context about what went wrong and suggestions for how to fix it.","acceptance_criteria":"- Error messages include context about what operation failed\n- Error messages provide suggestions for resolution\n- User-facing errors are clear and actionable","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-17T11:05:24.406731-05:00","updated_at":"2025-10-17T11:05:24.406731-05:00"}
{"id":"blues-traveler-7","title":"Enable performance hook when properly integrated","description":"Performance hook exists but is commented out in init.go. Need to properly integrate and enable the performance monitoring hook.","design":"Review performance.go implementation, ensure it's properly integrated with the hook system, add tests if missing, and uncomment the registration in init.go. If performance.go doesn't exist, create it with basic performance monitoring capabilities (timing, resource usage, etc.).","acceptance_criteria":"- Performance hook implementation reviewed or created\n- Tests added for performance hook\n- Hook properly registered in init.go\n- Documentation updated with performance hook usage","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T11:05:44.288079-05:00","updated_at":"2025-10-17T11:05:44.288079-05:00"}
