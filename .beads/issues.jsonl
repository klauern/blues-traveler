{"id":"blues-traveler-1","title":"Integrate log rotation into logging system","description":"Log rotation is configured via lumberjack but not actually used. The logging system writes directly to OpenFile instead of through the rotating logger.","design":"Wire lumberjack into logging system by adding LogWriter io.Writer to HookContext. When LogWriter is present, write logs through it instead of directly to file. This will enable actual log rotation based on configured settings.","acceptance_criteria":"- LogWriter field added to HookContext\n- Logging writes through LogWriter when present\n- Log rotation settings (maxAge, maxSize, maxBackups, compress) are applied\n- Tests verify rotation behavior","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T11:05:23.971897-05:00","updated_at":"2025-10-17T11:05:23.971897-05:00"}
{"id":"blues-traveler-10","title":"Refactor top 3 complex functions (cognitive complexity \u0026gt;80)","description":"Reduce cognitive complexity of:\n1. newHooksCustomSyncCommand: 103 (target: \u0026lt;30) - internal/cmd/hooks.go:763:1\n2. newHooksCustomInstallCommand: 81 (target: \u0026lt;30) - internal/cmd/hooks.go:574:1  \n3. newHooksCustomBlockedCommand: 52 (target: \u0026lt;30) - internal/cmd/hooks.go:1161:1\n\nExtract nested logic into helper functions with descriptive names.","acceptance_criteria":"All three functions have cognitive complexity \u0026lt;30, tests passing","status":"closed","priority":1,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T16:34:05.559303-05:00","updated_at":"2025-10-25T18:13:24.355532-05:00","closed_at":"2025-10-25T18:13:24.355532-05:00","labels":["high-roi","priority-1","refactoring"],"dependencies":[{"issue_id":"blues-traveler-10","depends_on_id":"blues-traveler-17","type":"related","created_at":"2025-10-25T16:36:58.734954-05:00","created_by":"daemon"},{"issue_id":"blues-traveler-10","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:15.577819-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-11","title":"Add error checking to defer statements in tests","description":"Fix 31 unchecked errors, primarily in test cleanup code. Replace patterns like:\n  defer os.RemoveAll(tempDir)\n  defer os.Setenv(...)\n  \nWith proper error handling:\n  t.Cleanup(func() {\n      if err := os.RemoveAll(tempDir); err != nil {\n          t.Logf(\"cleanup failed: %v\", err)\n      }\n  })","acceptance_criteria":"All errcheck linter issues resolved (31 occurrences)","status":"closed","priority":1,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T16:34:05.716457-05:00","updated_at":"2025-10-25T18:42:06.45418-05:00","closed_at":"2025-10-25T18:42:06.45418-05:00","labels":["error-handling","high-roi","priority-1"],"dependencies":[{"issue_id":"blues-traveler-11","depends_on_id":"blues-traveler-17","type":"related","created_at":"2025-10-25T16:36:58.873102-05:00","created_by":"daemon"},{"issue_id":"blues-traveler-11","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:15.69978-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-12","title":"Create constants for repeated strings","description":"Replace 10 occurrences of string duplication with constants:\n- \"project\" - 11 occurrences\n- \"global\" - 11 occurrences  \n- \"json\" - 12 occurrences\n- \"toml\" - 4 occurrences\n- Tool names: \"Bash\", \"Edit\", \"Write\" - 6 occurrences each\n\nCreate constant package or add to existing constants.","acceptance_criteria":"All goconst linter issues resolved (10 occurrences), constants defined and used throughout codebase","status":"closed","priority":1,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T16:34:05.88164-05:00","updated_at":"2025-10-25T18:51:50.309881-05:00","closed_at":"2025-10-25T18:51:50.309881-05:00","labels":["duplication","high-roi","priority-1"],"dependencies":[{"issue_id":"blues-traveler-12","depends_on_id":"blues-traveler-17","type":"related","created_at":"2025-10-25T16:36:59.011951-05:00","created_by":"daemon"},{"issue_id":"blues-traveler-12","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:15.835335-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-13","title":"Refactor tests to table-driven patterns","description":"Simplify complex test functions using Go table-driven test pattern:\n- TestLoadConfigWithFallback: complexity 22 - internal/config/enhanced_loading_test.go:20:1\n- TestGetMigrationStatus: complexity 18 - internal/config/migration_test.go:379:1  \n- TestActualMigration: complexity 15 - internal/config/migration_test.go:180:1\n- runConfigSync: complexity 44 - internal/cmd/config_sync_test.go:150:1\n\nBreak into smaller test cases with clear names.","acceptance_criteria":"Test complexity reduced below 15 for all identified functions, tests remain comprehensive","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-25T16:34:06.054463-05:00","updated_at":"2025-10-25T16:34:06.054463-05:00","labels":["medium-roi","priority-2","testing"],"dependencies":[{"issue_id":"blues-traveler-13","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:15.958237-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-14","title":"Split large config files","description":"Refactor oversized config-related files:\n- internal/config/migration_test.go: 571 lines (complexity: 22, 18, 15, 13, 12)\n- internal/cmd/config_xdg.go: 566 lines (complexity: 38)\n- internal/config/settings.go: 560 lines (complexity: 18)\n- internal/config/enhanced_loading_test.go: 495 lines (complexity: 22)\n\nSplit by logical concern while maintaining cohesion.","acceptance_criteria":"Files split into smaller units (\u0026lt;400 lines), complexity metrics improved","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-25T16:34:06.218989-05:00","updated_at":"2025-10-25T16:34:06.218989-05:00","labels":["medium-roi","priority-2","refactoring"],"dependencies":[{"issue_id":"blues-traveler-14","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:16.079365-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-15","title":"Add godoc comments to exported functions","description":"Fix 78 revive issues related to missing documentation:\n- Package comments missing: 9 packages\n- Exported functions without comments: 30+\n- Unused parameter names: 25+\n\nAdd proper godoc comments following Go conventions.","acceptance_criteria":"All revive linter issues resolved (78 occurrences), godoc complete","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-25T16:34:06.394996-05:00","updated_at":"2025-10-25T16:34:06.394996-05:00","labels":["documentation","medium-roi","priority-2"],"dependencies":[{"issue_id":"blues-traveler-15","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:16.203078-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-16","title":"Remove or fix unused parameters","description":"Address 2 unparam issues:\n- (*FetchBlockerHook).loadBlockedFromConfig always returns nil error - internal/hooks/fetch_blocker.go:177:70\n- Other functions with unused parameters\n\nRemove unused parameters or add _ prefix if needed for interface compliance.","acceptance_criteria":"All unparam linter issues resolved","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-25T16:34:06.552775-05:00","updated_at":"2025-10-25T16:34:06.552775-05:00","labels":["cleanup","medium-roi","priority-2"],"dependencies":[{"issue_id":"blues-traveler-16","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:16.338152-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-17","title":"Setup CI pipeline with golangci-lint","description":"Integrate golangci-lint into CI/CD pipeline using .golangci.yml configuration.\n\nSetup automated checks for:\n- Cyclomatic complexity\n- Cognitive complexity  \n- Error checking\n- Code duplication\n- Documentation\n\nConfigure to fail on new high-complexity code.","acceptance_criteria":"CI running golangci-lint, blocking PRs with complexity violations","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T16:34:06.717655-05:00","updated_at":"2025-10-25T16:34:06.717655-05:00","labels":["ci","long-term","priority-3"],"dependencies":[{"issue_id":"blues-traveler-17","depends_on_id":"blues-traveler-18","type":"blocks","created_at":"2025-10-25T16:36:59.152736-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-18","title":"Establish complexity budget and prevention","description":"Incrementally reduce complexity thresholds to prevent regression:\n- Phase 1: Current state (cyclop: 15, cognit: 20)\n- Phase 2: Reduce to 10\n- Phase 3: Reduce to 8  \n- Phase 4: Target 5\n\nDocument complexity budget policy and enforce in code reviews.","acceptance_criteria":"Complexity policy documented, thresholds reduced to target levels over time","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T16:34:06.88781-05:00","updated_at":"2025-10-25T16:34:06.88781-05:00","labels":["long-term","priority-3","process"]}
{"id":"blues-traveler-19","title":"Fix variable shadowing built-in 'any' type","description":"Rename variable in internal/core/expressions.go:27:2 that shadows Go 1.18+ built-in 'any' type alias.\n\nChange to anyMatch or hasAny. Consider if custom expression evaluation can be simplified.","acceptance_criteria":"Variable renamed, no shadowing of built-in types","status":"closed","priority":2,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T16:34:07.064132-05:00","updated_at":"2025-10-25T19:59:14.070128-05:00","closed_at":"2025-10-25T19:59:14.070128-05:00","labels":["modernization","priority-2","quick-fix"],"dependencies":[{"issue_id":"blues-traveler-19","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:16.467588-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-2","title":"Add external tool availability detection","description":"Format and vet hooks depend on external tools (prettier, uvx, ruff, ty, fd) without checking if they're available, leading to confusing error messages.","design":"Add lazy tool detection with helpful error messages. Check tool availability before use and provide installation instructions if missing. Tools to check: prettier, uvx, ruff, ty, fd.","acceptance_criteria":"- Tool availability check before execution\n- Clear error messages with installation instructions\n- Graceful degradation when tools are missing\n- Tests for tool detection logic","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T11:05:24.063588-05:00","updated_at":"2025-10-17T11:05:24.063588-05:00"}
{"id":"blues-traveler-20","title":"Add hooks doctor command to diagnose installation status","description":"Implement a `hooks doctor` command that shows:\n- Which hooks are installed\n- Installation contexts (project vs user/global)\n- Configuration file locations and their precedence\n- Validation status of hook configurations\n- Potential issues or conflicts\n\nThis will help users understand their hooks setup and troubleshoot issues.","design":"Based on exploration of the codebase:\n1. Add new subcommand to internal/cmd/hooks.go under NewHooksCommand\n2. Create newHooksDoctorCommand() function\n3. Leverage existing config.LoadHooksConfig() to discover configurations\n4. Report on:\n   - Project-level hooks (.claude/hooks/)\n   - Global-level hooks (~/.claude/hooks/)\n   - Configuration merge order and precedence\n   - Validation results\n5. Provide helpful output showing installation health","acceptance_criteria":"- `blues-traveler hooks doctor` command runs successfully\n- Shows installed hooks from both project and global contexts\n- Displays configuration file locations\n- Validates hook configurations and reports issues\n- Output is clear and actionable\n- Tests added for the new command","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-25T18:34:01.5946-05:00","updated_at":"2025-10-25T18:53:24.407652-05:00","closed_at":"2025-10-25T18:53:24.407652-05:00"}
{"id":"blues-traveler-21","title":"Reduce cognitive complexity in newHooksInstallCommand (46 \u003e 20)","description":"Function newHooksInstallCommand in internal/cmd/hooks_install.go:15 has cognitive complexity of 46, exceeding threshold of 20","status":"closed","priority":2,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T19:49:38.806101-05:00","updated_at":"2025-10-25T20:10:44.071817-05:00","closed_at":"2025-10-25T20:10:44.071817-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-22","title":"Reduce cognitive complexity in newHooksCustomInitCommand (47 \u003e 20)","description":"Function newHooksCustomInitCommand in internal/cmd/hooks_custom_init.go:15 has cognitive complexity of 47, exceeding threshold of 20","status":"closed","priority":2,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T19:49:38.939257-05:00","updated_at":"2025-10-25T20:10:44.471892-05:00","closed_at":"2025-10-25T20:10:44.471892-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-23","title":"Reduce cognitive complexity in FetchBlockerHook.preToolUseHandler (21 \u003e 20)","description":"Function (*FetchBlockerHook).preToolUseHandler in internal/hooks/fetch_blocker.go:39 has cognitive complexity of 21, exceeding threshold of 20","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T19:49:39.070161-05:00","updated_at":"2025-10-25T19:49:39.070161-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-24","title":"Reduce cognitive complexity in init function (22 \u003e 20)","description":"Function init in internal/hooks/init.go:11 has cognitive complexity of 22, exceeding threshold of 20","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T19:49:39.205266-05:00","updated_at":"2025-10-25T19:49:39.205266-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-25","title":"Reduce cognitive complexity in SecurityHook.preToolUseHandler (29 \u003e 20)","description":"Function (*SecurityHook).preToolUseHandler in internal/hooks/security.go:36 has cognitive complexity of 29, exceeding threshold of 20","status":"closed","priority":2,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T19:49:39.33927-05:00","updated_at":"2025-10-25T20:10:44.847654-05:00","closed_at":"2025-10-25T20:10:44.847654-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-26","title":"Reduce cognitive complexity in GetConfigGroupsInSettings (22 \u003e 20)","description":"Function GetConfigGroupsInSettings in internal/config/settings.go:502 has cognitive complexity of 22, exceeding threshold of 20","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T19:49:39.487766-05:00","updated_at":"2025-10-25T19:49:39.487766-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-27","title":"Reduce cognitive complexity in TestLoadConfigWithFallback (25 \u003e 20)","description":"Function TestLoadConfigWithFallback in internal/config/enhanced_loading_test.go:20 has cognitive complexity of 25, exceeding threshold of 20","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T19:49:39.635793-05:00","updated_at":"2025-10-25T19:49:39.635793-05:00","labels":["complexity","gocognit","refactor","test"]}
{"id":"blues-traveler-28","title":"Reduce cognitive complexity in mergeHookMatcher (28 \u003e 20)","description":"Function mergeHookMatcher in internal/config/settings.go:244 has cognitive complexity of 28, exceeding threshold of 20","status":"closed","priority":2,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T19:49:39.79073-05:00","updated_at":"2025-10-25T20:10:45.304264-05:00","closed_at":"2025-10-25T20:10:45.304264-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-29","title":"Reduce cognitive complexity in candidateConfigPaths (32 \u003e 20)","description":"Function candidateConfigPaths in internal/config/hooks_config.go:44 has cognitive complexity of 32, exceeding threshold of 20","status":"closed","priority":2,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T19:49:39.936245-05:00","updated_at":"2025-10-25T20:10:45.72853-05:00","closed_at":"2025-10-25T20:10:45.72853-05:00","labels":["complexity","gocognit","refactor"]}
{"id":"blues-traveler-3","title":"Add settings precedence tests","description":"No tests exist for project-override-global configuration scenarios. Need comprehensive tests to ensure project settings properly override global settings.","acceptance_criteria":"- Test: project enabled + global disabled = enabled\n- Test: project disabled + global enabled = disabled  \n- Test: project nil + global enabled = enabled\n- Test: project nil + global disabled = disabled\n- All precedence scenarios covered","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T11:05:24.144727-05:00","updated_at":"2025-10-17T11:05:24.144727-05:00"}
{"id":"blues-traveler-30","title":"Reduce cognitive complexity in MockCommandExecutor.WasCommandExecuted (22 \u003e 20)","description":"Function (*MockCommandExecutor).WasCommandExecuted in internal/core/mocks.go:159 has cognitive complexity of 22, exceeding threshold of 20","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T19:49:40.100496-05:00","updated_at":"2025-10-25T19:49:40.100496-05:00","labels":["complexity","gocognit","refactor","test"]}
{"id":"blues-traveler-31","title":"Fix path traversal vulnerability in hooks custom init","description":"The --name flag in hooks_custom_init.go:114 allows path traversal attacks. Need to sanitize input to prevent directory escape using filepath.Base and validate no path separators.","design":"Sanitize --name input:\n1. Use filepath.Base to get plain filename\n2. Reject if filepath.IsAbs or contains path separators\n3. Reject if empty, \".\", or \"..\"\n4. Then apply .yml/.yaml extension logic","acceptance_criteria":"- Cannot create files outside .claude/hooks directory\n- Absolute paths rejected with clear error\n- Path separators rejected with clear error\n- Empty/dot names rejected","status":"closed","priority":1,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T20:02:38.871545-05:00","updated_at":"2025-10-25T20:16:37.189143-05:00","closed_at":"2025-10-25T20:16:37.189143-05:00","labels":["critical","security"]}
{"id":"blues-traveler-32","title":"Fix compilation error in hooks_doctor_test.go","description":"Test uses nonexistent filepath.HasPrefix function at line 12 and 195-203, causing compilation failure.","design":"Replace filepath.HasPrefix with proper check:\n1. Import \"strings\"\n2. Use strings.HasPrefix on cleaned paths\n3. Add path separator to avoid false matches","acceptance_criteria":"- Tests compile successfully\n- Prefix check correctly identifies global vs project paths","status":"closed","priority":1,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T20:02:39.105528-05:00","updated_at":"2025-10-25T20:14:52.316387-05:00","closed_at":"2025-10-25T20:14:52.316387-05:00","labels":["critical","testing"]}
{"id":"blues-traveler-33","title":"Add event validation to sync command to prevent data loss","description":"hooks_custom_sync.go:27 lacks event validation. Invalid --event values cause RemoveConfigGroupFromSettings to remove hooks across ALL events, leading to data loss.","design":"Add event validation to parseSyncOptions:\n1. Pass isValidEventType and validEventTypes to newHooksCustomSyncCommand\n2. Validate event filter before processing\n3. Return clear error listing valid events\n4. Match pattern used in install command","acceptance_criteria":"- Invalid event names rejected with helpful error\n- Valid events listed in error message\n- No data loss on typos\n- Sync and install have identical validation","status":"closed","priority":1,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T20:02:39.341658-05:00","updated_at":"2025-10-25T20:19:11.207065-05:00","closed_at":"2025-10-25T20:19:11.207065-05:00","labels":["critical","data-loss"]}
{"id":"blues-traveler-34","title":"Fix uninstall command to handle flags and path changes","description":"hooks_install.go:251 uses exact string matching for uninstall, which fails when hooks were installed with --log/--format flags or when executable path changes.","design":"Implement removeHookTypeFromSettings helper:\n1. Match by hook type pattern (not exact command)\n2. Support \"hooks run \u0026lt;type\u0026gt;\" with any flags\n3. Handle different executable paths\n4. Remove across all event types","acceptance_criteria":"- Uninstall works regardless of --log/--format flags\n- Uninstall works if binary path changed\n- All instances of hook type removed across events\n- Clear error if hook type not found","status":"open","priority":1,"issue_type":"bug","created_at":"2025-10-25T20:02:39.57046-05:00","updated_at":"2025-10-25T20:02:39.57046-05:00","labels":["bug","critical"]}
{"id":"blues-traveler-35","title":"Fix debug logger nil panic and resource leaks","description":"debug.go:71-92 has multiple issues: nil logger panics in case blocks, missing directory creation, file descriptor leak, incorrect log path in message, string literals instead of constants.","design":"Fix debug hook initialization:\n1. Guard all logger calls with nil check or helper\n2. Create .claude/hooks dir before opening log file\n3. Add defer to close log file\n4. Correct message to show actual path (.claude/hooks/debug.log)\n5. Use ToolRead/ToolGlob constants","acceptance_criteria":"- No nil pointer panics\n- Log file created successfully\n- File descriptor closed on exit\n- Message shows correct log path\n- Uses named constants consistently","status":"closed","priority":1,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T20:02:39.815739-05:00","updated_at":"2025-10-25T20:23:59.858623-05:00","closed_at":"2025-10-25T20:23:59.858623-05:00","labels":["bug","critical"]}
{"id":"blues-traveler-36","title":"Fix settings file existence detection in doctor command","description":"hooks_doctor.go:95 always reports settings file exists because LoadSettings returns empty settings when file is missing, masking os.IsNotExist errors.","design":"Check file existence before loading:\n1. Use os.Stat on settingsPath first\n2. If IsNotExist, show \"No settings file found\" message\n3. Then call LoadSettings\n4. Apply same pattern to checkGlobalSettings","acceptance_criteria":"- Correctly reports when settings file missing\n- Differentiates between missing file and load error\n- Both project and global checks work correctly","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-25T20:02:40.051675-05:00","updated_at":"2025-10-25T20:02:40.051675-05:00","labels":["bug"]}
{"id":"blues-traveler-37","title":"Add per-file config discovery to doctor command","description":"hooks_doctor.go:367 getCandidateConfigPaths doesn't enumerate .claude/hooks/*.yml|*.yaml files, causing false negatives when doctor says it searches hooks/*.yml.","design":"Add directory enumeration:\n1. Use os.ReadDir on .claude/hooks for project scope\n2. Filter for .yml and .yaml files\n3. Add matched files to paths slice\n4. Repeat for global scope ~/.claude/hooks","acceptance_criteria":"- Doctor discovers all .yml/.yaml files in .claude/hooks\n- Both project and global hooks dirs scanned\n- Discovery matches documentation claims","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-25T20:02:40.291892-05:00","updated_at":"2025-10-25T20:02:40.291892-05:00","labels":["bug"]}
{"id":"blues-traveler-38","title":"Fix scope detection for config files in doctor command","description":"hooks_doctor.go:176 uses home directory prefix for scope detection, mislabeling project files located under user's home as \"global\".","design":"Compare against specific ~/.claude path:\n1. Compute globalPrefix as filepath.Join(home, \".claude\")\n2. Mark as global only if file equals or has that specific prefix\n3. Otherwise mark as project","acceptance_criteria":"- Project files under home correctly labeled as \"project\"\n- Only ~/.claude/* files labeled as \"global\"\n- Scope detection accurate for all cases","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-25T20:02:40.560129-05:00","updated_at":"2025-10-25T20:02:40.560129-05:00","labels":["bug"]}
{"id":"blues-traveler-39","title":"Wire --init flag in custom install command","description":"hooks_custom_install.go:26 declares --init flag but never uses it. loadOrCreateGroup is always called with false, so the flag has no effect.","design":"Pass flag value to loadAndPrepareConfig:\n1. Read cmd.Bool(\"init\") in action\n2. Pass to loadAndPrepareConfig as parameter\n3. Forward to loadOrCreateGroup call","acceptance_criteria":"- --init flag actually creates stub group\n- Flag value propagated through call chain\n- Group creation works as documented","status":"open","priority":2,"issue_type":"bug","created_at":"2025-10-25T20:02:40.818401-05:00","updated_at":"2025-10-25T20:02:40.818401-05:00","labels":["bug"]}
{"id":"blues-traveler-4","title":"Add diagnose command","description":"No way to check tool availability or configuration status. A diagnose command would help users troubleshoot issues.","design":"Add 'blues-traveler diagnose' command that checks:\n- External tool availability (gofumpt, prettier, fd, uvx, etc)\n- Configuration file locations and validity\n- Logging status and rotation config\n- Installed hooks\nProvide actionable output with installation instructions for missing tools.","acceptance_criteria":"- Command shows tool availability status\n- Shows configuration file paths\n- Shows logging and rotation status\n- Provides installation instructions for missing tools\n- Tests for diagnose command","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-17T11:05:24.227799-05:00","updated_at":"2025-10-17T11:05:24.227799-05:00"}
{"id":"blues-traveler-40","title":"Fix error format messages to reflect JSON-only support","description":"Multiple files reference YAML/TOML in error messages when only JSON is supported: config_xdg.go:522, hooks_install.go:123, hooks_install.go:236-239.","design":"Update error messages:\n1. Replace \"valid JSON/TOML\" with \"valid JSON\"\n2. Replace \"valid YAML/JSON\" with \"valid JSON\"\n3. Verify actual format support in each case","acceptance_criteria":"- Error messages accurately reflect supported formats\n- No mention of unsupported formats\n- Users not misled about capabilities","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-25T20:02:41.065657-05:00","updated_at":"2025-10-25T20:02:41.065657-05:00","labels":["bug","documentation"]}
{"id":"blues-traveler-41","title":"Add path quoting for commands with spaces","description":"hooks_install.go:100-107 doesn't quote execPath when constructing hook commands. Paths with spaces will break if runtime tokenizes by whitespace.","design":"Quote executable paths in commands:\n1. Verify how hooks execute commands (shell vs argv)\n2. Use %q format for execPath if needed\n3. Apply to all command construction sites","acceptance_criteria":"- Hooks work with executable paths containing spaces\n- Proper quoting based on execution model\n- All command construction sites updated","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-25T20:02:41.319498-05:00","updated_at":"2025-10-25T20:02:41.319498-05:00","labels":["bug"]}
{"id":"blues-traveler-42","title":"Fix sync change counting to exclude duplicates","description":"hooks_helpers.go:313-318 increments changed counter even when hook already exists, overcounting changes in sync operations.","design":"Use merge result to count changes:\n1. Capture AddHookToSettings result\n2. Check if WasDuplicate\n3. Only increment changed for actual additions/replacements","acceptance_criteria":"- Changed count reflects actual modifications\n- Duplicates not counted as changes\n- Sync reports accurate change summary","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-25T20:02:41.749864-05:00","updated_at":"2025-10-25T20:02:41.749864-05:00","labels":["bug"]}
{"id":"blues-traveler-43","title":"Increase docstring coverage to 80%","description":"Current docstring coverage is 71.74%, below the required 80% threshold per project standards.","design":"Add docstrings to exported items:\n1. Run coverage analysis to find missing docstrings\n2. Add godoc-style comments to exported functions/types\n3. Focus on new code from this PR\n4. Verify 80%+ coverage before merge","acceptance_criteria":"- Docstring coverage \u003e= 80%\n- All exported items documented\n- Documentation follows godoc conventions","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:02:43.156384-05:00","updated_at":"2025-10-25T20:02:43.156384-05:00","labels":["chore","documentation"]}
{"id":"blues-traveler-44","title":"Fix minor code quality issues","description":"Collection of small issues: cmd_exec naming (config_xdg.go:299), dead variable originalWalkFunc (migration_test.go:73), help text outdated (config_xdg.go:470), compress flag (config_xdg.go:548).","design":"Fix miscellaneous issues:\n1. Rename cmd_exec to cmdExec\n2. Remove unused originalWalkFunc\n3. Update help text to reflect XDG paths\n4. Use Command.IsSet for --compress flag","acceptance_criteria":"- All variable names follow Go idioms\n- No dead code\n- Help text accurate\n- Compress flag supports explicit false","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:02:43.411822-05:00","updated_at":"2025-10-25T20:02:43.411822-05:00","labels":["chore","code-quality"]}
{"id":"blues-traveler-45","title":"Review and adjust golangci-lint thresholds","description":"Current maintidx threshold (under: 20) may be too strict. cyclop skip-tests: false may generate noise in test code.","design":"Review linter configuration:\n1. Evaluate maintidx threshold effectiveness (20 vs 40-50)\n2. Assess test complexity checking impact\n3. Verify team can address all flagged issues\n4. Adjust thresholds based on findings","acceptance_criteria":"- Linter configuration sustainable for team\n- Thresholds catch real issues without noise\n- Documented rationale for settings","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-25T20:02:43.662416-05:00","updated_at":"2025-10-25T20:02:43.662416-05:00","labels":["chore","tooling"]}
{"id":"blues-traveler-46","title":"Replace os.Exit with error returns in install helpers","description":"hooks_install.go:340-409 calls os.Exit from helper functions, bypassing defers and complicating testing.","design":"Refactor uninstallAllKlauerHooks:\n1. Return error instead of calling os.Exit\n2. Handle error in CLI action\n3. Let action handle printing and exit","acceptance_criteria":"- No os.Exit calls from helpers\n- Defers execute properly\n- Functions testable in isolation\n- CLI action handles exit codes","status":"open","priority":2,"issue_type":"chore","created_at":"2025-10-25T20:03:16.339312-05:00","updated_at":"2025-10-25T20:03:16.339312-05:00","labels":["testing"]}
{"id":"blues-traveler-47","title":"Improve error messaging for missing settings files","description":"hooks_helpers.go:91-107 prints \"No hooks installed\" even when settings file doesn't exist, not distinguishing between empty file and missing file.","design":"Add file existence check:\n1. Use os.Stat on settingsPath\n2. If IsNotExist, print \"No settings file found\"\n3. Otherwise print \"No hooks installed\"","acceptance_criteria":"- Clear distinction between missing file and no hooks\n- Users understand whether to create file or add hooks\n- Better UX for listInstalledHooks","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-25T20:03:16.547518-05:00","updated_at":"2025-10-25T20:03:16.547518-05:00","labels":["ux"]}
{"id":"blues-traveler-48","title":"Standardize error wrapping with %w format","description":"Multiple files use %v instead of %w for error wrapping: hooks_custom.go:38-41, hooks_custom_sync.go, losing error chain context.","design":"Replace %v with %w for errors:\n1. Audit all fmt.Errorf calls\n2. Change %v to %w when wrapping errors\n3. Preserve error chains for debugging","acceptance_criteria":"- All error wrapping uses %w\n- Error chains preserved\n- Better debugging capability","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:03:16.724232-05:00","updated_at":"2025-10-25T20:03:16.724232-05:00","labels":["code-quality"]}
{"id":"blues-traveler-49","title":"Implement atomic writes for config files","description":"config_xdg.go:300-307 writes directly to config files. Power loss during write can corrupt configs.","design":"Add writeFileAtomic helper:\n1. Write to temp file in same directory\n2. Sync to disk\n3. Rename to target (atomic on POSIX)\n4. Apply to all config writes","acceptance_criteria":"- Config files never partially written\n- Power loss doesn't corrupt configs\n- All config writes use atomic pattern","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T20:03:16.927993-05:00","updated_at":"2025-10-25T20:03:16.927993-05:00","labels":["reliability"]}
{"id":"blues-traveler-5","title":"Clean up duplicate imports","description":"Some files have duplicate imports with different aliases for the same package, making the code less readable.","acceptance_criteria":"- All duplicate imports removed\n- Single consistent import alias used per package\n- Code still compiles and passes tests","status":"closed","priority":1,"issue_type":"chore","assignee":"klauern","created_at":"2025-10-17T11:05:24.315594-05:00","updated_at":"2025-10-25T19:22:18.094909-05:00","closed_at":"2025-10-25T19:22:18.094909-05:00"}
{"id":"blues-traveler-50","title":"Use tool name constants instead of string literals","description":"audit.go:79-87 uses string literals \"Read\" and \"Glob\" instead of ToolRead/ToolGlob constants, risking drift.","design":"Replace literals with constants:\n1. Use ToolRead instead of \"Read\"\n2. Use ToolGlob instead of \"Glob\"\n3. Apply consistently across all switch statements","acceptance_criteria":"- All tool name references use constants\n- No string literal tool names\n- Consistent with existing ToolBash/ToolEdit/ToolWrite usage","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:03:17.115745-05:00","updated_at":"2025-10-25T20:03:17.115745-05:00","labels":["code-quality"]}
{"id":"blues-traveler-51","title":"Optimize regex compilation in xdg.go","description":"xdg.go:91-99 compiles hyphen regex on every call to sanitization function.","design":"Move regex to package level:\n1. Add var hyphenRE = regexp.MustCompile(`-+`) at package level\n2. Use hyphenRE in sanitization function\n3. Compile once at init time","acceptance_criteria":"- Regex compiled once\n- Performance improved for repeated calls\n- No functional changes","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:03:17.3998-05:00","updated_at":"2025-10-25T20:03:17.3998-05:00","labels":["performance"]}
{"id":"blues-traveler-52","title":"Modernize test cleanup patterns","description":"Multiple test files use MkdirTemp + t.Cleanup instead of t.TempDir, and manual env var handling instead of t.Setenv.","design":"Update test patterns:\n1. Replace MkdirTemp + t.Cleanup with t.TempDir\n2. Replace manual os.Setenv + t.Cleanup with t.Setenv\n3. Apply across enhanced_loading_test.go, migration_test.go, xdg_test.go","acceptance_criteria":"- All tests use t.TempDir for temp directories\n- All tests use t.Setenv for environment variables\n- Less boilerplate code\n- Cleanup guaranteed","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:03:17.628841-05:00","updated_at":"2025-10-25T20:03:17.628841-05:00","labels":["testing"]}
{"id":"blues-traveler-53","title":"Remove redundant directory creation in custom init","description":"hooks_custom_init.go:104-107 calls MkdirAll for hooks subdir, but config.EnsureClaudeDir() already creates it.","design":"Remove redundant MkdirAll:\n1. Verify EnsureClaudeDir creates .claude/hooks\n2. Remove redundant MkdirAll call\n3. Keep hooksDir variable for filepath.Join","acceptance_criteria":"- No redundant directory creation\n- Hooks directory still created correctly\n- Code cleaner","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:03:17.954719-05:00","updated_at":"2025-10-25T20:03:17.954719-05:00","labels":["cleanup"]}
{"id":"blues-traveler-54","title":"Implement \"ask\" permission mode for Cursor compatibility","description":"Add support for 3-way permission model (allow/deny/ask) to match Cursor's hook response format. Currently only support binary allow/block.","design":"1. Extend cchooks integration to support Ask() response type\n2. Modify internal/hooks/config_hook.go preHandler/postHandler to handle ask mode\n3. Update response handling to prompt user when ask is returned\n4. Add tests for ask mode behavior","acceptance_criteria":"- Hook can return \"ask\" permission\n- User receives prompt for manual approval\n- Response is properly communicated back to Claude Code\n- Tests cover ask mode scenarios","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-25T20:26:06.492972-05:00","updated_at":"2025-10-25T20:26:06.492972-05:00"}
{"id":"blues-traveler-55","title":"Add separate userMessage and agentMessage fields to hook responses","description":"Support Cursor's dual-message format where hooks can provide different messages for users vs the AI agent.","design":"1. Extend response structs to include userMessage and agentMessage fields\n2. Update all hook implementations to use new fields\n3. Modify response formatting to display appropriate message to each audience\n4. Update documentation with examples","acceptance_criteria":"- Hooks can specify separate userMessage and agentMessage\n- Messages are properly routed to correct audience\n- Backward compatible with single message format\n- Documentation updated","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-25T20:26:06.630421-05:00","updated_at":"2025-10-25T20:26:06.630421-05:00"}
{"id":"blues-traveler-56","title":"Build Cursor hooks.json to Blues Traveler config adapter","description":"Create converter to translate Cursor's hooks.json format into Blues Traveler settings.json format, including event name mapping.","design":"1. Create parser for Cursor hooks.json schema\n2. Build event mapper: beforeShellExecution → PreToolUse + TOOL_NAME filter\n3. Implement blues-traveler hooks import --from-cursor command\n4. Generate equivalent Blues Traveler configuration\n5. Add validation and error handling","acceptance_criteria":"- Can import valid Cursor hooks.json files\n- Event names properly mapped to Blues Traveler equivalents\n- Generated config works correctly\n- Command has --dry-run option\n- Tests cover common Cursor configurations","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T20:26:06.771929-05:00","updated_at":"2025-10-25T20:26:06.771929-05:00"}
{"id":"blues-traveler-57","title":"Add Cursor event name aliases to Blues Traveler","description":"Support Cursor event names (beforeShellExecution, afterFileEdit, etc.) as aliases that auto-translate to appropriate Blues Traveler events and filters.","design":"1. Create event alias registry mapping Cursor → Blues Traveler events\n2. Add translation layer in event handling\n3. Support mixed configs with both naming conventions\n4. Document alias mappings in README","acceptance_criteria":"- Cursor event names recognized in config files\n- Auto-translated to correct Blues Traveler events with filters\n- No breaking changes to existing configs\n- Documentation includes mapping table","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-25T20:26:06.977274-05:00","updated_at":"2025-10-25T20:26:06.977274-05:00"}
{"id":"blues-traveler-58","title":"Add version field to configuration schema","description":"Add \"version\" field to settings.json and hooks config to support future migration and compatibility checks.","design":"1. Add version field to config structs\n2. Implement version-aware config loading\n3. Default to version 1 for existing configs\n4. Add validation for supported versions\n5. Update all config generation to include version","acceptance_criteria":"- All new configs include version: 1\n- Legacy configs without version still load correctly\n- Version validation provides clear errors\n- Tests cover version handling","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-25T20:26:07.14581-05:00","updated_at":"2025-10-25T20:26:07.14581-05:00"}
{"id":"blues-traveler-6","title":"Improve error messages with context and suggestions","description":"Some error messages could be more helpful by adding context about what went wrong and suggestions for how to fix it.","acceptance_criteria":"- Error messages include context about what operation failed\n- Error messages provide suggestions for resolution\n- User-facing errors are clear and actionable","status":"closed","priority":1,"issue_type":"chore","assignee":"klauern","created_at":"2025-10-17T11:05:24.406731-05:00","updated_at":"2025-10-25T19:24:41.030556-05:00","closed_at":"2025-10-25T19:24:41.030556-05:00"}
{"id":"blues-traveler-7","title":"Enable performance hook when properly integrated","description":"Performance hook exists but is commented out in init.go. Need to properly integrate and enable the performance monitoring hook.","design":"Review performance.go implementation, ensure it's properly integrated with the hook system, add tests if missing, and uncomment the registration in init.go. If performance.go doesn't exist, create it with basic performance monitoring capabilities (timing, resource usage, etc.).","acceptance_criteria":"- Performance hook implementation reviewed or created\n- Tests added for performance hook\n- Hook properly registered in init.go\n- Documentation updated with performance hook usage","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T11:05:44.288079-05:00","updated_at":"2025-10-17T11:05:44.288079-05:00"}
{"id":"blues-traveler-8","title":"Code Complexity Reduction Initiative","description":"Address 171 complexity issues identified in golangci-lint audit. Focus on reducing cognitive complexity, improving maintainability, and establishing quality gates.","acceptance_criteria":"All priority 1-2 tasks completed, CI pipeline with golangci-lint running, complexity metrics showing improvement","status":"in_progress","priority":1,"issue_type":"epic","assignee":"klauern","created_at":"2025-10-25T16:34:05.245877-05:00","updated_at":"2025-10-25T18:27:06.062161-05:00"}
{"id":"blues-traveler-9","title":"Refactor hooks.go into multiple files","description":"Break up internal/cmd/hooks.go (1,512 lines) into 5-7 smaller files by concern:\n- hooks_install.go - Installation logic\n- hooks_sync.go - Sync operations  \n- hooks_custom.go - Custom hook management\n- hooks_blocked.go - Blocked URL management\n- hooks_init.go - Initialization logic\n\nThis file contains functions with cognitive complexity up to 103 (target: \u0026lt;30)","design":"Extract functions by their primary responsibility. Maintain backward compatibility through package-internal interfaces if needed.","acceptance_criteria":"- hooks.go split into 5-7 files of ~200-300 lines each\n- All tests passing\n- No exported API changes","status":"closed","priority":1,"issue_type":"task","assignee":"klauern","created_at":"2025-10-25T16:34:05.404539-05:00","updated_at":"2025-10-25T17:28:42.283636-05:00","closed_at":"2025-10-25T17:28:42.283636-05:00","labels":["high-roi","priority-1","refactoring"],"dependencies":[{"issue_id":"blues-traveler-9","depends_on_id":"blues-traveler-10","type":"blocks","created_at":"2025-10-25T16:36:58.468556-05:00","created_by":"daemon"},{"issue_id":"blues-traveler-9","depends_on_id":"blues-traveler-17","type":"related","created_at":"2025-10-25T16:36:58.60338-05:00","created_by":"daemon"},{"issue_id":"blues-traveler-9","depends_on_id":"blues-traveler-8","type":"parent-child","created_at":"2025-10-25T16:37:15.46012-05:00","created_by":"daemon"}]}
