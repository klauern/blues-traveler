{"id":"blues-traveler-1","title":"Integrate log rotation into logging system","description":"Log rotation is configured via lumberjack but not actually used. The logging system writes directly to OpenFile instead of through the rotating logger.","design":"Wire lumberjack into logging system by adding LogWriter io.Writer to HookContext. When LogWriter is present, write logs through it instead of directly to file. This will enable actual log rotation based on configured settings.","acceptance_criteria":"- LogWriter field added to HookContext\n- Logging writes through LogWriter when present\n- Log rotation settings (maxAge, maxSize, maxBackups, compress) are applied\n- Tests verify rotation behavior","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T11:05:23.971897-05:00","updated_at":"2025-10-17T11:05:23.971897-05:00"}
{"id":"blues-traveler-10","title":"Fix Windows path test failure in wrapper_test.go","description":"TestWrapperScriptPath fails on Windows CI because generated path uses backslashes (C:\\Users\\...), but test checks for forward slashes (.cursor/hooks). Need to normalize path before assertion.","design":"In internal/platform/cursor/wrapper_test.go around line 80:\n- Use filepath.ToSlash(path) to normalize before strings.Contains checks\n- This converts backslashes to forward slashes for cross-platform compatibility","acceptance_criteria":"- Test passes on Windows CI\n- Test still passes on Unix systems\n- Path normalization uses filepath.ToSlash","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:29.219722-05:00","updated_at":"2025-10-25T12:50:55.770949-05:00","closed_at":"2025-10-25T12:50:55.770955-05:00","labels":["cursor-support","major","testing"]}
{"id":"blues-traveler-11","title":"Quote binary path and hook key in wrapper.go to handle spaces","description":"wrapper.go template interpolates BinaryPath directly into shell command. If blues-traveler is installed in a directory with spaces (common on macOS), the shell splits it into multiple words and the hook call fails.","design":"In internal/platform/cursor/wrapper.go around line 143:\n- Change: if {{.BinaryPath}} hooks run {{.HookKey}} --cursor-mode\n- To: if \"{{.BinaryPath}}\" hooks run \"{{.HookKey}}\" --cursor-mode\nQuote both interpolated values for shell safety.","acceptance_criteria":"- Binary path and hook key properly quoted in template\n- Wrapper works when installed in paths with spaces\n- Test verifies wrapper with space in path works","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:29.404719-05:00","updated_at":"2025-10-25T12:50:55.821419-05:00","closed_at":"2025-10-25T12:50:55.821421-05:00","labels":["cursor-support","major"]}
{"id":"blues-traveler-12","title":"Fix TOOL_NAME inconsistency for BeforeShellExecution","description":"BeforeShellExecution sets TOOL_NAME=\"shell\" in environment (line 1872) but uses tool_name=\"Bash\" in JSON transformation (line 1805). This inconsistency causes hooks to behave differently depending on whether they read env vars or parse JSON.","design":"In internal/cmd/hooks.go:\n- Update setupCursorEnvironment to use TOOL_NAME=\"Bash\" instead of \"shell\"\n- Ensures consistency with Claude Code behavior and JSON transformation","acceptance_criteria":"- TOOL_NAME=\"Bash\" used in both env var and JSON\n- Consistent behavior between environment and JSON parsing\n- Tests verify TOOL_NAME consistency","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:29.589615-05:00","updated_at":"2025-10-25T12:50:57.594291-05:00","closed_at":"2025-10-25T12:50:57.594294-05:00","labels":["cursor-support","major"],"dependencies":[{"issue_id":"blues-traveler-12","depends_on_id":"blues-traveler-20","type":"related","created_at":"2025-10-25T11:10:32.779165-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-13","title":"Add test cases for beforeSubmitPrompt and stop event mappings","description":"TestCursorPlatform_MapEventToGeneric is missing test coverage for beforeSubmitPrompt → UserPromptSubmitEvent and stop → StopEvent. Only 4 of 6 Cursor events are tested.","design":"In internal/platform/cursor/platform_test.go around line 126:\n- Add test case for beforeSubmitPrompt mapping to UserPromptSubmitEvent\n- Add test case for stop mapping to StopEvent\n- Both with wantSupported: true","acceptance_criteria":"- Test case added for beforeSubmitPrompt event\n- Test case added for stop event\n- All 6 Cursor events have mapping tests\n- Tests pass","status":"closed","priority":4,"issue_type":"task","created_at":"2025-10-25T11:09:29.801623-05:00","updated_at":"2025-10-25T12:50:57.641806-05:00","closed_at":"2025-10-25T12:50:57.641808-05:00","labels":["cursor-support","major","testing"]}
{"id":"blues-traveler-14","title":"Fix jq SARIF processing to handle missing tags gracefully","description":"Security workflow jq command fails with \"Cannot index object with string 'properties'\" when SARIF entries legitimately omit properties or tags. Need to guard the mutation to only run when properties.tags exists.","design":"In .github/workflows/security.yml around line 90:\n- Replace: jq '.runs[].tool.driver.rules[]?.properties.tags |= ...'\n- With: jq 'walk(if type == \"object\" and (.properties? | type) == \"object\" and (.properties.tags? | type) == \"array\" then (.properties.tags |= unique) else . end)'\nUses walk to safely handle missing fields.","acceptance_criteria":"- jq processing succeeds even when tags are missing\n- Tag deduplication still works when tags exist\n- Security workflow completes successfully\n- CI passes","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:29.988126-05:00","updated_at":"2025-10-25T12:50:57.69059-05:00","closed_at":"2025-10-25T12:50:57.690592-05:00","labels":["ci","major"]}
{"id":"blues-traveler-15","title":"CRITICAL: Fix matcher '*' breaking hook execution in wrapper.go","description":"The default matcher \"*\" is passed directly to `grep -E` which treats it as invalid regex, causing grep to error out and hooks to silently bypass execution. This is a critical functional bug - hooks don't actually run with default configuration.","design":"In internal/platform/cursor/wrapper.go around line 133, normalize the matcher before passing to grep:\n- If matcher is exactly \"*\" or empty, map it to \".*\" (valid ERE)\n- Otherwise validate/escape it for ERE usage\n- This ensures default hook matcher allows matching instead of erroring","acceptance_criteria":"- Matcher \"*\" is normalized to \".*\" before grep\n- Hooks execute with default configuration\n- Test verifies wrapper with \"*\" matcher runs hook successfully\n- No silent bypassing of hook execution","status":"closed","priority":4,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T11:09:57.716089-05:00","updated_at":"2025-10-25T12:50:47.214386-05:00","closed_at":"2025-10-25T12:50:47.214414-05:00","labels":["critical","cursor-support","security"]}
{"id":"blues-traveler-16","title":"CRITICAL: Fix directory permissions to 0750 or less","description":"GitHub Advanced Security scan flagged directory permissions in internal/cmd/hooks.go as too permissive. Need to ensure directory permissions are 0750 or less for security compliance.","acceptance_criteria":"- All os.MkdirAll calls use 0750 or more restrictive permissions\n- Security scan passes\n- Directories still functional for intended use","status":"closed","priority":4,"issue_type":"bug","assignee":"klauern","created_at":"2025-10-25T11:09:57.848804-05:00","updated_at":"2025-10-25T12:50:48.738763-05:00","closed_at":"2025-10-25T12:50:48.738765-05:00","labels":["critical","security"]}
{"id":"blues-traveler-17","title":"CRITICAL: Fix WriteFile permissions to 0600 or less","description":"GitHub Advanced Security scan flagged WriteFile permissions in internal/cmd/hooks.go as too permissive. Files should be created with 0600 or more restrictive permissions.","acceptance_criteria":"- All file write operations use 0600 or more restrictive permissions\n- Security scan passes\n- Files still readable/writable by owner","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:57.983622-05:00","updated_at":"2025-10-25T12:50:50.136457-05:00","closed_at":"2025-10-25T12:50:50.136463-05:00","labels":["critical","security"]}
{"id":"blues-traveler-18","title":"CRITICAL: Fix file inclusion vulnerability in cursor/platform.go:157","description":"GitHub Advanced Security flagged potential file inclusion via variable at internal/platform/cursor/platform.go:157. Need to review and sanitize file path handling.","acceptance_criteria":"- File path properly sanitized/validated\n- Security scan passes\n- No potential for arbitrary file inclusion\n- Tests verify path validation","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:58.120151-05:00","updated_at":"2025-10-25T12:50:51.910203-05:00","closed_at":"2025-10-25T12:50:51.910206-05:00","labels":["critical","cursor-support","security"]}
{"id":"blues-traveler-19","title":"CRITICAL: Implement or document 'only' condition parsing","description":"Documentation shows YAML syntax `only: ${TOOL_NAME} == \"Bash\"` in .cursor/rules/configuration.mdc:68, but no code exists to parse or evaluate these `only` filters.","design":"Two options:\n1. Add support in hook parser for `only` expressions with condition evaluation\n2. Remove `only` syntax from docs and clarify actual filter capabilities","acceptance_criteria":"- Either: `only` condition parsing implemented with tests\n- Or: Documentation updated to reflect actual behavior without `only`\n- No mismatch between docs and implementation","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:58.255037-05:00","updated_at":"2025-10-25T12:50:53.727671-05:00","closed_at":"2025-10-25T12:50:53.727675-05:00","labels":["critical","cursor-support","documentation"]}
{"id":"blues-traveler-2","title":"Add external tool availability detection","description":"Format and vet hooks depend on external tools (prettier, uvx, ruff, ty, fd) without checking if they're available, leading to confusing error messages.","design":"Add lazy tool detection with helpful error messages. Check tool availability before use and provide installation instructions if missing. Tools to check: prettier, uvx, ruff, ty, fd.","acceptance_criteria":"- Tool availability check before execution\n- Clear error messages with installation instructions\n- Graceful degradation when tools are missing\n- Tests for tool detection logic","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T11:05:24.063588-05:00","updated_at":"2025-10-17T11:05:24.063588-05:00"}
{"id":"blues-traveler-20","title":"Update TOOL_NAME in docs from 'shell' to 'Bash'","description":"docs/cursor-support.md:93 says TOOL_NAME is set to \"shell\" but should be \"Bash\" to match event mapping table and cursor-implementation.mdc","acceptance_criteria":"- All references to TOOL_NAME=\"shell\" changed to \"Bash\"\n- Consistent with event mapping documentation","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-25T11:10:24.666832-05:00","updated_at":"2025-10-25T12:50:59.49603-05:00","closed_at":"2025-10-25T12:50:59.496034-05:00","labels":["cursor-support","documentation"]}
{"id":"blues-traveler-21","title":"Correct year from 2024 to 2025 in documentation","description":"Multiple documentation files show 2024 dates but should be 2025 to match PR creation date","design":"Files to update:\n- docs/cursor-support.md: Last Updated date\n- docs/planning/README.md: Phase 2 completion date and Last Updated\n- Any other files with 2024-09-30 dates","acceptance_criteria":"- All 2024 dates corrected to 2025\n- Dates are consistent across documentation","status":"closed","priority":1,"issue_type":"chore","created_at":"2025-10-25T11:10:24.799265-05:00","updated_at":"2025-10-25T12:50:59.543638-05:00","closed_at":"2025-10-25T12:50:59.543642-05:00","labels":["documentation"]}
{"id":"blues-traveler-22","title":"Update Phase 3 status to complete in planning docs","description":"docs/planning/README.md shows Phase 3 as \"In Progress\" but it's actually complete with full hook execution via JSON transformation","acceptance_criteria":"- Phase 3 marked as complete\n- Status description updated to reflect completed JSON transformation\n- Next Priority section adjusted or removed","status":"closed","priority":1,"issue_type":"chore","created_at":"2025-10-25T11:10:24.933117-05:00","updated_at":"2025-10-25T12:50:59.586094-05:00","closed_at":"2025-10-25T12:50:59.586097-05:00","labels":["documentation"]}
{"id":"blues-traveler-23","title":"Clarify FILES_CHANGED delimiter across documentation","description":".cursor/rules/custom-hooks.mdc says FILES_CHANGED is comma-separated, but README.md describes it as space-separated. Need to align with actual implementation.","design":"- Check actual runtime behavior of FILES_CHANGED\n- Update all documentation to match\n- Ensure consistency between README and .cursor/rules","acceptance_criteria":"- All documentation uses same delimiter description\n- Description matches actual runtime behavior\n- No conflicting information","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-25T11:10:25.068641-05:00","updated_at":"2025-10-25T12:51:01.495504-05:00","closed_at":"2025-10-25T12:51:01.495506-05:00","labels":["documentation"]}
{"id":"blues-traveler-24","title":"Fix command syntax in README troubleshooting","description":"README.md troubleshooting table shows 'blues-traveler list' but should be 'blues-traveler hooks list' for consistency","acceptance_criteria":"- Command updated to 'blues-traveler hooks list'\n- Consistent with rest of documentation","status":"closed","priority":1,"issue_type":"chore","created_at":"2025-10-25T11:10:25.203999-05:00","updated_at":"2025-10-25T12:51:01.541277-05:00","closed_at":"2025-10-25T12:51:01.54128-05:00","labels":["documentation"]}
{"id":"blues-traveler-25","title":"Add language hint to code block in docs/index.md","description":"docs/index.md:117 has a fenced code block without language specification, causing markdownlint warning MD040","design":"Add ```text to the code block showing project structure","acceptance_criteria":"- Code block has language hint\n- markdownlint MD040 warning resolved\n- Syntax highlighting works correctly","status":"closed","priority":1,"issue_type":"chore","created_at":"2025-10-25T11:10:25.343396-05:00","updated_at":"2025-10-25T12:51:01.596778-05:00","closed_at":"2025-10-25T12:51:01.596782-05:00","labels":["documentation"]}
{"id":"blues-traveler-3","title":"Add settings precedence tests","description":"No tests exist for project-override-global configuration scenarios. Need comprehensive tests to ensure project settings properly override global settings.","acceptance_criteria":"- Test: project enabled + global disabled = enabled\n- Test: project disabled + global enabled = disabled  \n- Test: project nil + global enabled = enabled\n- Test: project nil + global disabled = disabled\n- All precedence scenarios covered","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T11:05:24.144727-05:00","updated_at":"2025-10-17T11:05:24.144727-05:00"}
{"id":"blues-traveler-4","title":"Add diagnose command","description":"No way to check tool availability or configuration status. A diagnose command would help users troubleshoot issues.","design":"Add 'blues-traveler diagnose' command that checks:\n- External tool availability (gofumpt, prettier, fd, uvx, etc)\n- Configuration file locations and validity\n- Logging status and rotation config\n- Installed hooks\nProvide actionable output with installation instructions for missing tools.","acceptance_criteria":"- Command shows tool availability status\n- Shows configuration file paths\n- Shows logging and rotation status\n- Provides installation instructions for missing tools\n- Tests for diagnose command","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-17T11:05:24.227799-05:00","updated_at":"2025-10-17T11:05:24.227799-05:00"}
{"id":"blues-traveler-5","title":"Clean up duplicate imports","description":"Some files have duplicate imports with different aliases for the same package, making the code less readable.","acceptance_criteria":"- All duplicate imports removed\n- Single consistent import alias used per package\n- Code still compiles and passes tests","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-17T11:05:24.315594-05:00","updated_at":"2025-10-17T11:05:24.315594-05:00"}
{"id":"blues-traveler-6","title":"Improve error messages with context and suggestions","description":"Some error messages could be more helpful by adding context about what went wrong and suggestions for how to fix it.","acceptance_criteria":"- Error messages include context about what operation failed\n- Error messages provide suggestions for resolution\n- User-facing errors are clear and actionable","status":"open","priority":1,"issue_type":"chore","created_at":"2025-10-17T11:05:24.406731-05:00","updated_at":"2025-10-17T11:05:24.406731-05:00"}
{"id":"blues-traveler-7","title":"Enable performance hook when properly integrated","description":"Performance hook exists but is commented out in init.go. Need to properly integrate and enable the performance monitoring hook.","design":"Review performance.go implementation, ensure it's properly integrated with the hook system, add tests if missing, and uncomment the registration in init.go. If performance.go doesn't exist, create it with basic performance monitoring capabilities (timing, resource usage, etc.).","acceptance_criteria":"- Performance hook implementation reviewed or created\n- Tests added for performance hook\n- Hook properly registered in init.go\n- Documentation updated with performance hook usage","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T11:05:44.288079-05:00","updated_at":"2025-10-17T11:05:44.288079-05:00"}
{"id":"blues-traveler-8","title":"Add TOOL_NAME env var for Cursor AfterFileEdit and BeforeReadFile events","description":"When replaying Cursor events in runHookCursorMode, AfterFileEdit and BeforeReadFile don't set TOOL_NAME environment variable. Claude always provides this (e.g., \"Edit\", \"Read\"). Hooks that rely on TOOL_NAME will make incorrect decisions without it.","design":"In internal/cmd/hooks.go around line 1899, in setupCursorEnvironment:\n- case cursor.AfterFileEdit: set TOOL_NAME=\"Edit\"\n- case cursor.BeforeReadFile: set TOOL_NAME=\"Read\"\nThis mirrors Claude's behavior for consistency.","acceptance_criteria":"- TOOL_NAME=\"Edit\" set for AfterFileEdit events\n- TOOL_NAME=\"Read\" set for BeforeReadFile events\n- Tests verify env var is set correctly\n- Hooks can reliably use TOOL_NAME for all events","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:28.862726-05:00","updated_at":"2025-10-25T12:50:55.682012-05:00","closed_at":"2025-10-25T12:50:55.682015-05:00","labels":["cursor-support","major"],"dependencies":[{"issue_id":"blues-traveler-8","depends_on_id":"blues-traveler-9","type":"related","created_at":"2025-10-25T11:10:32.890812-05:00","created_by":"daemon"}]}
{"id":"blues-traveler-9","title":"Fix event mapping asymmetry for BeforeReadFile","description":"Bidirectional event mapping is inconsistent: MapEventToGeneric(BeforeReadFile) returns PreToolUseEvent, but MapEventFromGeneric(PreToolUseEvent) only returns [BeforeShellExecution, BeforeMCPExecution], missing BeforeReadFile.","design":"In internal/platform/cursor/platform.go:89, update MapEventFromGeneric:\n- Add BeforeReadFile to the PreToolUseEvent case\n- Return []string{BeforeShellExecution, BeforeMCPExecution, BeforeReadFile}\nEnsures bidirectional mapping consistency.","acceptance_criteria":"- BeforeReadFile included in MapEventFromGeneric(PreToolUseEvent)\n- Bidirectional mapping is symmetric\n- Tests verify both directions map correctly","status":"closed","priority":4,"issue_type":"bug","created_at":"2025-10-25T11:09:29.039421-05:00","updated_at":"2025-10-25T12:50:55.723764-05:00","closed_at":"2025-10-25T12:50:55.723767-05:00","labels":["cursor-support","major"]}
