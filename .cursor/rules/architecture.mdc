---
alwaysApply: true
---
# Blues Traveler Architecture Rules

## Project Overview

This is `blues-traveler`, a CLI tool for managing and running Claude Code hooks with a **static hook registry** architecture.

## Core Design Principles

### Static Registration

- All hooks MUST register at startup via `init()` functions in [internal/hooks/init.go](mdc:internal/hooks/init.go)
- NO dynamic plugin loading or runtime registration
- Hooks are registered in the `builtinHooks` map

### Independent Execution

- Each hook runs in isolation for security and reliability
- Hooks are stateless and created fresh for each execution
- Simple lifecycle: Create → Execute → Cleanup

### Hook Interface

All hooks MUST implement the `core.Hook` interface:

- `Key() string` - Hook identifier
- `Name() string` - Human-readable name
- `Description() string` - Hook purpose
- `Run() error` - Main execution logic
- `IsEnabled() bool` - Settings-based enable check

Use `core.BaseHook` for common functionality - DO NOT reimplement these methods manually.

## Framework

- CLI framework: **urfave/cli v3** (NOT Cobra - that was migrated away)
- See [docs/cobra-to-urfave-cli-migration.md](mdc:docs/cobra-to-urfave-cli-migration.md) for migration details

## File Structure

- [main.go](mdc:main.go) - CLI entry point
- [internal/hooks/init.go](mdc:internal/hooks/init.go) - Hook registration
- [internal/hooks/](mdc:internal/hooks/) - Hook implementations
- [internal/core/registry.go](mdc:internal/core/registry.go) - Registry management
- [internal/config/](mdc:internal/config/) - Configuration system
- [internal/cmd/](mdc:internal/cmd/) - CLI commands

## Configuration

Settings are managed in JSON format with two scopes:

- **Project**: `./.claude/settings.json` (takes precedence)
- **Global**: `~/.claude/settings.json` (fallback)
- **XDG**: `~/.config/blues-traveler/` (preferred, see [docs/xdg-migration-spec.md](mdc:docs/xdg-migration-spec.md))

## What NOT to Do

- ❌ Suggest dynamic plugin loading or runtime registration
- ❌ Reference the old pipeline system (removed)
- ❌ Suggest modifying registry at runtime
- ❌ Reference Cobra (migrated to urfave/cli v3)

## What TO Do

- ✅ Add hooks to static registry in [init.go](mdc:internal/hooks/init.go)
- ✅ Implement `core.Hook` interface using `core.BaseHook`
- ✅ Use existing settings system for configuration
- ✅ Reference urfave/cli v3 for CLI functionality
- ✅ Point to existing hook implementations as examples
