# Blues Traveler Architecture & Guidelines

## Project Overview

`blues-traveler` is a CLI tool for managing and running hooks for Claude Code and Cursor IDE with:
- **Static hook registry** - All hooks register at startup via `init()` functions
- **Platform abstraction** - Multi-IDE support (Claude Code, Cursor)
- **Custom hooks system** - YAML/JSON-driven project-specific automation

## Core Architecture Principles

### 1. Static Registration
- Hooks register via `init()` in [internal/hooks/init.go](mdc:internal/hooks/init.go)
- NO dynamic plugin loading or runtime registration
- Hooks are stateless and created fresh for each execution

### 2. Hook Interface
All hooks implement `core.Hook` using `core.BaseHook`:
```go
type MyHook struct {
    *core.BaseHook
}

func NewMyHook(ctx *core.HookContext) core.Hook {
    base := core.NewBaseHook("key", "Name", "Description", ctx)
    return &MyHook{BaseHook: base}
}

func (h *MyHook) Run() error {
    if !h.IsEnabled() { return nil }
    // Hook logic
    return nil
}
```

### 3. Platform Support
- **Claude Code**: Environment variables, `.claude/settings.json`
- **Cursor**: JSON stdin/stdout, `~/.cursor/hooks.json`
- Platform detection order: env var → `.cursor/` → `.claude/` → default

### 4. Configuration System
- **XDG-compliant**: `~/.config/blues-traveler/` (respects `XDG_CONFIG_HOME`)
- **Legacy fallback**: `.claude/settings.json` (project/global)
- **Precedence**: Project → Global → Default

## Key Guidelines

### DO ✅
- Use `core.BaseHook` for all hooks
- Add hooks to static registry in `init.go`
- Use urfave/cli v3 for CLI commands
- Respect XDG configuration paths
- Test with 80%+ coverage for core functionality

### DON'T ❌
- Suggest dynamic plugin loading
- Reference the old pipeline system (removed)
- Modify registry at runtime
- Reference Cobra (migrated to urfave/cli v3)
- Reimplement BaseHook methods manually

## Quick Reference

### File Structure
- [main.go](mdc:main.go) - CLI entry point
- [internal/hooks/](mdc:internal/hooks/) - Hook implementations
- [internal/platform/](mdc:internal/platform/) - Platform abstraction
- [internal/config/](mdc:internal/config/) - Configuration system
- [internal/cmd/](mdc:internal/cmd/) - CLI commands

### Related Documentation
- [Platform Support](mdc:.cursor/rules/platform-support.mdc) - Multi-IDE details
- [Hook Implementation](mdc:.cursor/rules/hook-implementation.mdc) - Creating hooks
- [Custom Hooks](mdc:.cursor/rules/custom-hooks.mdc) - YAML/JSON hooks
- [CLI Commands](mdc:.cursor/rules/cli-commands.mdc) - urfave/cli v3 patterns

- ✅ Reference urfave/cli v3 for CLI functionality
- ✅ Point to existing hook implementations as examples
