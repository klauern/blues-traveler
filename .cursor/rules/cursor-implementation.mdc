---
description: Cursor IDE hooks implementation with JSON transformation
---

# Cursor Hooks Implementation

## Status

âœ… **Phase 3 Complete** - Full hook execution with JSON transformation
ðŸŽ¯ **Version**: v0.3.0-alpha (Ready for Testing)

See [docs/cursor-support.md](mdc:docs/cursor-support.md) for complete documentation.

## Key Architecture

### Hybrid Adapter Pattern

```text
Cursor Agent
    â†“ JSON stdin (Cursor format)
Wrapper Script (auto-generated)
    â†“ Parse JSON, set env vars
blues-traveler run <hook> --cursor-mode
    â†“ Transform to Claude Code format
Hook Execution (cchooks Runner)
    â†“ JSON response (Cursor format)
Cursor Agent
```

### JSON Transformation

The critical innovation is **automatic format transformation** in [internal/cmd/hooks.go](mdc:internal/cmd/hooks.go):

1. **transformCursorToClaudeFormat()** - Converts Cursor JSON to Claude Code format
   - Maps `beforeShellExecution` â†’ `PreToolUse` with `tool_name: "Bash"`
   - Maps `beforeMCPExecution` â†’ `PreToolUse` with actual tool name
   - Maps `afterFileEdit` â†’ `PostToolUse` with `tool_name: "Edit"`
   - Maps `beforeSubmitPrompt` â†’ `UserPromptSubmit`
   - Maps `stop` â†’ `Stop`

2. **executeCursorHook()** - Pipes transformed JSON to hook stdin
   - Creates pipe for stdin replacement
   - Writes transformed JSON in goroutine
   - Executes hook normally via `hook.Run()`
   - Converts response back to Cursor format

## Event Mapping

| Cursor Event           | Generic Event    | Claude Code Event | Tool Name |
| ---------------------- | ---------------- | ----------------- | --------- |
| `beforeShellExecution` | PreToolUse       | PreToolUse        | "Bash"    |
| `beforeMCPExecution`   | PreToolUse       | PreToolUse        | (varies)  |
| `afterFileEdit`        | PostToolUse      | PostToolUse       | "Edit"    |
| `beforeReadFile`       | PreToolUse       | PreToolUse        | "Read"    |
| `beforeSubmitPrompt`   | UserPromptSubmit | UserPromptSubmit  | N/A       |
| `stop`                 | Stop             | Stop              | N/A       |

## Implementation Files

### Core Files

- [internal/platform/cursor/platform.go](mdc:internal/platform/cursor/platform.go) - Platform implementation
- [internal/platform/cursor/types.go](mdc:internal/platform/cursor/types.go) - JSON schemas
- [internal/platform/cursor/wrapper.go](mdc:internal/platform/cursor/wrapper.go) - Wrapper script generator
- [internal/cmd/hooks.go](mdc:internal/cmd/hooks.go) - Hook execution & transformation

### Key Functions

```go
// Transform Cursor JSON to Claude Code format
func transformCursorToClaudeFormat(input cursor.HookInput) ([]byte, error)

// Execute hook with transformed input
func executeCursorHook(hook Hook, input cursor.HookInput) cursor.HookOutput

// Run hook in Cursor mode (--cursor-mode flag)
func runHookCursorMode(key string, ...) error

// Install hook for Cursor platform
func installHookCursor(p platform.Platform, hookType string, ...) error
```

## Wrapper Script Generation

Wrapper scripts are auto-generated by [internal/platform/cursor/wrapper.go](mdc:internal/platform/cursor/wrapper.go):

- Stored in `~/.cursor/hooks/blues-traveler-<hook>-<event>.sh`
- Parse Cursor JSON and set environment variables
- Call `blues-traveler hooks run <hook> --cursor-mode`
- Handle exit codes (0 = allow, 3 = deny)
- Optional: Apply matcher regex filters

## Usage

### Installation

```bash
# Auto-detect platform
blues-traveler hooks install security --event PreToolUse

# Explicit Cursor platform
blues-traveler hooks install security --platform cursor

# Result: Generates wrapper + updates ~/.cursor/hooks.json
```

### Testing

```bash
# Manual test (echo JSON to stdin)
echo '{"hook_event_name": "beforeShellExecution", "command": "rm -rf /"}' | \
  blues-traveler hooks run security --cursor-mode

# Should output: {"permission": "deny", "userMessage": "..."}
```

## How All Hooks Work

Because of the JSON transformation layer, **all existing hooks work in Cursor without modification**:

- âœ… Security hook blocks dangerous commands
- âœ… Format hook auto-formats code
- âœ… Vet hook checks code quality
- âœ… Audit hook logs to JSON
- âœ… Debug hook logs to file
- âœ… Custom hooks from hooks.yml

The transformation happens transparently - hooks receive Claude Code formatted events and work as designed!

## Future Enhancements

- [ ] Custom hooks support for Cursor (YAML/JSON-driven hooks)
- [ ] Cross-platform sync command (sync hooks between Claude Code and Cursor)
- [ ] Migration guide for users switching platforms